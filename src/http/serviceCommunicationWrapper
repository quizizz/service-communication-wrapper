import axios, { AxiosResponse, AxiosRequestConfig } from 'axios';
import { ServiceCommunicationWrapperInterface } from '../ServiceCommunicationWrapperConfig';
import { ServiceCommunicationWrapperConfig } from '../ServiceCommunicationWrapper';

class ServiceWrapper implements ServiceCommunicationWrapperInterface {
  private baseUrl: string;
  private defaultHeaders: Record<string, string>;

  constructor(config: ServiceCommunicationWrapperConfig) {
    this.baseUrl = config.baseUrl;
    this.defaultHeaders = config.defaultHeaders || {};
  }

  private async makeRequest(
    method: string,
    endpoint: string,
    data?: any,
    headers?: Record<string, string>,
    config?: AxiosRequestConfig
  ): Promise<any | null> {
    const url = `${this.baseUrl}/${endpoint}`;
    const requestOptions: AxiosRequestConfig = {
      method,
      url,
      headers: { ...this.defaultHeaders, ...headers },
      data,
      ...config,
    };

    try {
      const response: AxiosResponse = await axios(requestOptions);
      if (response.status >= 200 && response.status < 300) {
        return response.data;
      } else {
        return null;
      }
    } catch (error: any) {
      console.error(`Request failed: ${error.message}`);
      return null;
    }
  }

  async get(endpoint: string, headers?: Record<string, string>, config?: AxiosRequestConfig): Promise<any | null> {
    return this.makeRequest('GET', endpoint, undefined, headers, config);
  }

  async post(endpoint: string, data?: any, headers?: Record<string, string>, config?: AxiosRequestConfig): Promise<any | null> {
    return this.makeRequest('POST', endpoint, data, headers, config);
  }

  async put(endpoint: string, data?: any, headers?: Record<string, string>, config?: AxiosRequestConfig): Promise<any | null> {
    return this.makeRequest('PUT', endpoint, data, headers, config);
  }

  async delete(endpoint: string, headers?: Record<string, string>, config?: AxiosRequestConfig): Promise<any | null> {
    return this.makeRequest('DELETE', endpoint, undefined, headers, config);
  }
}